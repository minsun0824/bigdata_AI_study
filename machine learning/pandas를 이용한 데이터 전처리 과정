{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hi minsun\n"
     ]
    }
   ],
   "source": [
    "print('hi minsun')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5050\n"
     ]
    }
   ],
   "source": [
    "i=1\n",
    "hap=0\n",
    "while i <=100:\n",
    "    hap+=i\n",
    "    i+=1\n",
    "print(hap)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5050"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hap=0\n",
    "for i in range(101):\n",
    "    hap+=i\n",
    "hap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PANDAS를 이용한 전처리 데이터 과정"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 탐색적 데이터분석\n",
    "\n",
    "**정보에 대해 모를 때 분석**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>name</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>ticket</th>\n",
       "      <th>fare</th>\n",
       "      <th>cabin</th>\n",
       "      <th>embarked</th>\n",
       "      <th>boat</th>\n",
       "      <th>body</th>\n",
       "      <th>home.dest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Allen, Miss. Elisabeth Walton</td>\n",
       "      <td>female</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24160</td>\n",
       "      <td>211.3375</td>\n",
       "      <td>B5</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>St Louis, MO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Allison, Master. Hudson Trevor</td>\n",
       "      <td>male</td>\n",
       "      <td>0.9167</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Allison, Miss. Helen Loraine</td>\n",
       "      <td>female</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Allison, Mr. Hudson Joshua Creighton</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>135.0</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Allison, Mrs. Hudson J C (Bessie Waldo Daniels)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1304</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zabour, Miss. Hileni</td>\n",
       "      <td>female</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2665</td>\n",
       "      <td>14.4542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>328.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1305</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zabour, Miss. Thamine</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2665</td>\n",
       "      <td>14.4542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1306</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zakarian, Mr. Mapriededer</td>\n",
       "      <td>male</td>\n",
       "      <td>26.5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2656</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>304.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1307</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zakarian, Mr. Ortin</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2670</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1308</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zimmerman, Mr. Leo</td>\n",
       "      <td>male</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315082</td>\n",
       "      <td>7.8750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1309 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      pclass  survived                                             name  \\\n",
       "0          1         1                    Allen, Miss. Elisabeth Walton   \n",
       "1          1         1                   Allison, Master. Hudson Trevor   \n",
       "2          1         0                     Allison, Miss. Helen Loraine   \n",
       "3          1         0             Allison, Mr. Hudson Joshua Creighton   \n",
       "4          1         0  Allison, Mrs. Hudson J C (Bessie Waldo Daniels)   \n",
       "...      ...       ...                                              ...   \n",
       "1304       3         0                             Zabour, Miss. Hileni   \n",
       "1305       3         0                            Zabour, Miss. Thamine   \n",
       "1306       3         0                        Zakarian, Mr. Mapriededer   \n",
       "1307       3         0                              Zakarian, Mr. Ortin   \n",
       "1308       3         0                               Zimmerman, Mr. Leo   \n",
       "\n",
       "         sex      age  sibsp  parch  ticket      fare    cabin embarked boat  \\\n",
       "0     female  29.0000      0      0   24160  211.3375       B5        S    2   \n",
       "1       male   0.9167      1      2  113781  151.5500  C22 C26        S   11   \n",
       "2     female   2.0000      1      2  113781  151.5500  C22 C26        S  NaN   \n",
       "3       male  30.0000      1      2  113781  151.5500  C22 C26        S  NaN   \n",
       "4     female  25.0000      1      2  113781  151.5500  C22 C26        S  NaN   \n",
       "...      ...      ...    ...    ...     ...       ...      ...      ...  ...   \n",
       "1304  female  14.5000      1      0    2665   14.4542      NaN        C  NaN   \n",
       "1305  female      NaN      1      0    2665   14.4542      NaN        C  NaN   \n",
       "1306    male  26.5000      0      0    2656    7.2250      NaN        C  NaN   \n",
       "1307    male  27.0000      0      0    2670    7.2250      NaN        C  NaN   \n",
       "1308    male  29.0000      0      0  315082    7.8750      NaN        S  NaN   \n",
       "\n",
       "       body                        home.dest  \n",
       "0       NaN                     St Louis, MO  \n",
       "1       NaN  Montreal, PQ / Chesterville, ON  \n",
       "2       NaN  Montreal, PQ / Chesterville, ON  \n",
       "3     135.0  Montreal, PQ / Chesterville, ON  \n",
       "4       NaN  Montreal, PQ / Chesterville, ON  \n",
       "...     ...                              ...  \n",
       "1304  328.0                              NaN  \n",
       "1305    NaN                              NaN  \n",
       "1306  304.0                              NaN  \n",
       "1307    NaN                              NaN  \n",
       "1308    NaN                              NaN  \n",
       "\n",
       "[1309 rows x 14 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_excel('datasets/titanic.xls')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- feature selection 을 해서 x를 구하려는 것\n",
    "- 어떤 지표가 해당되는지 보기: pclass, sex, age....\n",
    "- NaN: not a number. missing data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- info 는 정보를 요약해서 보고싶음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1309 entries, 0 to 1308\n",
      "Data columns (total 14 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   pclass     1309 non-null   int64  \n",
      " 1   survived   1309 non-null   int64  \n",
      " 2   name       1309 non-null   object \n",
      " 3   sex        1309 non-null   object \n",
      " 4   age        1046 non-null   float64\n",
      " 5   sibsp      1309 non-null   int64  \n",
      " 6   parch      1309 non-null   int64  \n",
      " 7   ticket     1309 non-null   object \n",
      " 8   fare       1308 non-null   float64\n",
      " 9   cabin      295 non-null    object \n",
      " 10  embarked   1307 non-null   object \n",
      " 11  boat       486 non-null    object \n",
      " 12  body       121 non-null    float64\n",
      " 13  home.dest  745 non-null    object \n",
      "dtypes: float64(3), int64(4), object(7)\n",
      "memory usage: 143.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Dtype에서 int는 숫자, object는 문자"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- describe는 숫자로 되어있는 것의 요약"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>body</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1046.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1309.000000</td>\n",
       "      <td>1308.000000</td>\n",
       "      <td>121.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.294882</td>\n",
       "      <td>0.381971</td>\n",
       "      <td>29.881135</td>\n",
       "      <td>0.498854</td>\n",
       "      <td>0.385027</td>\n",
       "      <td>33.295479</td>\n",
       "      <td>160.809917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.837836</td>\n",
       "      <td>0.486055</td>\n",
       "      <td>14.413500</td>\n",
       "      <td>1.041658</td>\n",
       "      <td>0.865560</td>\n",
       "      <td>51.758668</td>\n",
       "      <td>97.696922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.166700</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "      <td>72.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>155.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.275000</td>\n",
       "      <td>256.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>328.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            pclass     survived          age        sibsp        parch  \\\n",
       "count  1309.000000  1309.000000  1046.000000  1309.000000  1309.000000   \n",
       "mean      2.294882     0.381971    29.881135     0.498854     0.385027   \n",
       "std       0.837836     0.486055    14.413500     1.041658     0.865560   \n",
       "min       1.000000     0.000000     0.166700     0.000000     0.000000   \n",
       "25%       2.000000     0.000000    21.000000     0.000000     0.000000   \n",
       "50%       3.000000     0.000000    28.000000     0.000000     0.000000   \n",
       "75%       3.000000     1.000000    39.000000     1.000000     0.000000   \n",
       "max       3.000000     1.000000    80.000000     8.000000     9.000000   \n",
       "\n",
       "              fare        body  \n",
       "count  1308.000000  121.000000  \n",
       "mean     33.295479  160.809917  \n",
       "std      51.758668   97.696922  \n",
       "min       0.000000    1.000000  \n",
       "25%       7.895800   72.000000  \n",
       "50%      14.454200  155.000000  \n",
       "75%      31.275000  256.000000  \n",
       "max     512.329200  328.000000  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- boxplot: 그래프 그리기. 이상치를 알 수 있음."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b360263788>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "생존률을 그래프로 그려보자\n",
    "- 행과 열방향이 몇 개인지 알자.\n",
    "- subplot이용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt #matplotlib라는 폴더 밑에 pylot를 가져와서 plt라고 하겠다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- df['갯수셀거'].value_counts(): 셀 거 갯수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1\n",
       "1       1\n",
       "2       0\n",
       "3       0\n",
       "4       0\n",
       "       ..\n",
       "1304    0\n",
       "1305    0\n",
       "1306    0\n",
       "1307    0\n",
       "1308    0\n",
       "Name: survived, Length: 1309, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['survived'].value_counts()\n",
    "df['survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b360671e08>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, ax = plt.subplots(1,2,figsize=(12,6)) #1행2열, 그림 싸이즈는 12대 6\n",
    "#ax[0]이 왼쪽에 그려짐, ax[0]는 오른쪽\n",
    "df['survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%.2f%%',ax=ax[0]) #그냥 시각화한거임\n",
    "sns.countplot('survived',data=df,ax=ax[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b3605feb88>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['age'].hist(bins=20,figsize=(18,8),grid=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survived</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>body</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pclass</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.619195</td>\n",
       "      <td>39.159918</td>\n",
       "      <td>0.436533</td>\n",
       "      <td>0.365325</td>\n",
       "      <td>87.508992</td>\n",
       "      <td>162.828571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.429603</td>\n",
       "      <td>29.506705</td>\n",
       "      <td>0.393502</td>\n",
       "      <td>0.368231</td>\n",
       "      <td>21.179196</td>\n",
       "      <td>167.387097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.255289</td>\n",
       "      <td>24.816367</td>\n",
       "      <td>0.568406</td>\n",
       "      <td>0.400564</td>\n",
       "      <td>13.302889</td>\n",
       "      <td>155.818182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        survived        age     sibsp     parch       fare        body\n",
       "pclass                                                                \n",
       "1       0.619195  39.159918  0.436533  0.365325  87.508992  162.828571\n",
       "2       0.429603  29.506705  0.393502  0.368231  21.179196  167.387097\n",
       "3       0.255289  24.816367  0.568406  0.400564  13.302889  155.818182"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('pclass').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- df.corr(): 상관관계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>fare</th>\n",
       "      <th>body</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>pclass</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.312469</td>\n",
       "      <td>-0.408106</td>\n",
       "      <td>0.060832</td>\n",
       "      <td>0.018322</td>\n",
       "      <td>-0.558629</td>\n",
       "      <td>-0.034642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>survived</th>\n",
       "      <td>-0.312469</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.055513</td>\n",
       "      <td>-0.027825</td>\n",
       "      <td>0.082660</td>\n",
       "      <td>0.244265</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>-0.408106</td>\n",
       "      <td>-0.055513</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.243699</td>\n",
       "      <td>-0.150917</td>\n",
       "      <td>0.178739</td>\n",
       "      <td>0.058809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sibsp</th>\n",
       "      <td>0.060832</td>\n",
       "      <td>-0.027825</td>\n",
       "      <td>-0.243699</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.373587</td>\n",
       "      <td>0.160238</td>\n",
       "      <td>-0.099961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parch</th>\n",
       "      <td>0.018322</td>\n",
       "      <td>0.082660</td>\n",
       "      <td>-0.150917</td>\n",
       "      <td>0.373587</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.221539</td>\n",
       "      <td>0.051099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare</th>\n",
       "      <td>-0.558629</td>\n",
       "      <td>0.244265</td>\n",
       "      <td>0.178739</td>\n",
       "      <td>0.160238</td>\n",
       "      <td>0.221539</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.043110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>body</th>\n",
       "      <td>-0.034642</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.058809</td>\n",
       "      <td>-0.099961</td>\n",
       "      <td>0.051099</td>\n",
       "      <td>-0.043110</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            pclass  survived       age     sibsp     parch      fare      body\n",
       "pclass    1.000000 -0.312469 -0.408106  0.060832  0.018322 -0.558629 -0.034642\n",
       "survived -0.312469  1.000000 -0.055513 -0.027825  0.082660  0.244265       NaN\n",
       "age      -0.408106 -0.055513  1.000000 -0.243699 -0.150917  0.178739  0.058809\n",
       "sibsp     0.060832 -0.027825 -0.243699  1.000000  0.373587  0.160238 -0.099961\n",
       "parch     0.018322  0.082660 -0.150917  0.373587  1.000000  0.221539  0.051099\n",
       "fare     -0.558629  0.244265  0.178739  0.160238  0.221539  1.000000 -0.043110\n",
       "body     -0.034642       NaN  0.058809 -0.099961  0.051099 -0.043110  1.000000"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "그래프로 그리기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b360d62448>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "sns.heatmap(df.corr(),linewidths=0.01, square=True,cmap=plt.cm.viridis,linecolor='white',annot=True) #인과인지 등등 상관관계"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "연령대 별. 새로운  COLUMN을 추가하는 방법"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['age_cat']=pd.cut(df['age'],bins=[0,10,20,50,100],include_lowest=True,labels=['baby','teenage','adult','old'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>survived</th>\n",
       "      <th>name</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>sibsp</th>\n",
       "      <th>parch</th>\n",
       "      <th>ticket</th>\n",
       "      <th>fare</th>\n",
       "      <th>cabin</th>\n",
       "      <th>embarked</th>\n",
       "      <th>boat</th>\n",
       "      <th>body</th>\n",
       "      <th>home.dest</th>\n",
       "      <th>age_cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Allen, Miss. Elisabeth Walton</td>\n",
       "      <td>female</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24160</td>\n",
       "      <td>211.3375</td>\n",
       "      <td>B5</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>St Louis, MO</td>\n",
       "      <td>adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Allison, Master. Hudson Trevor</td>\n",
       "      <td>male</td>\n",
       "      <td>0.9167</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>11</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "      <td>baby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Allison, Miss. Helen Loraine</td>\n",
       "      <td>female</td>\n",
       "      <td>2.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "      <td>baby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Allison, Mr. Hudson Joshua Creighton</td>\n",
       "      <td>male</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>135.0</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "      <td>adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Allison, Mrs. Hudson J C (Bessie Waldo Daniels)</td>\n",
       "      <td>female</td>\n",
       "      <td>25.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>113781</td>\n",
       "      <td>151.5500</td>\n",
       "      <td>C22 C26</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Montreal, PQ / Chesterville, ON</td>\n",
       "      <td>adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1304</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zabour, Miss. Hileni</td>\n",
       "      <td>female</td>\n",
       "      <td>14.5000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2665</td>\n",
       "      <td>14.4542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>328.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>teenage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1305</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zabour, Miss. Thamine</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2665</td>\n",
       "      <td>14.4542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1306</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zakarian, Mr. Mapriededer</td>\n",
       "      <td>male</td>\n",
       "      <td>26.5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2656</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>304.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1307</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zakarian, Mr. Ortin</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2670</td>\n",
       "      <td>7.2250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adult</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1308</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Zimmerman, Mr. Leo</td>\n",
       "      <td>male</td>\n",
       "      <td>29.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315082</td>\n",
       "      <td>7.8750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>adult</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1309 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      pclass  survived                                             name  \\\n",
       "0          1         1                    Allen, Miss. Elisabeth Walton   \n",
       "1          1         1                   Allison, Master. Hudson Trevor   \n",
       "2          1         0                     Allison, Miss. Helen Loraine   \n",
       "3          1         0             Allison, Mr. Hudson Joshua Creighton   \n",
       "4          1         0  Allison, Mrs. Hudson J C (Bessie Waldo Daniels)   \n",
       "...      ...       ...                                              ...   \n",
       "1304       3         0                             Zabour, Miss. Hileni   \n",
       "1305       3         0                            Zabour, Miss. Thamine   \n",
       "1306       3         0                        Zakarian, Mr. Mapriededer   \n",
       "1307       3         0                              Zakarian, Mr. Ortin   \n",
       "1308       3         0                               Zimmerman, Mr. Leo   \n",
       "\n",
       "         sex      age  sibsp  parch  ticket      fare    cabin embarked boat  \\\n",
       "0     female  29.0000      0      0   24160  211.3375       B5        S    2   \n",
       "1       male   0.9167      1      2  113781  151.5500  C22 C26        S   11   \n",
       "2     female   2.0000      1      2  113781  151.5500  C22 C26        S  NaN   \n",
       "3       male  30.0000      1      2  113781  151.5500  C22 C26        S  NaN   \n",
       "4     female  25.0000      1      2  113781  151.5500  C22 C26        S  NaN   \n",
       "...      ...      ...    ...    ...     ...       ...      ...      ...  ...   \n",
       "1304  female  14.5000      1      0    2665   14.4542      NaN        C  NaN   \n",
       "1305  female      NaN      1      0    2665   14.4542      NaN        C  NaN   \n",
       "1306    male  26.5000      0      0    2656    7.2250      NaN        C  NaN   \n",
       "1307    male  27.0000      0      0    2670    7.2250      NaN        C  NaN   \n",
       "1308    male  29.0000      0      0  315082    7.8750      NaN        S  NaN   \n",
       "\n",
       "       body                        home.dest  age_cat  \n",
       "0       NaN                     St Louis, MO    adult  \n",
       "1       NaN  Montreal, PQ / Chesterville, ON     baby  \n",
       "2       NaN  Montreal, PQ / Chesterville, ON     baby  \n",
       "3     135.0  Montreal, PQ / Chesterville, ON    adult  \n",
       "4       NaN  Montreal, PQ / Chesterville, ON    adult  \n",
       "...     ...                              ...      ...  \n",
       "1304  328.0                              NaN  teenage  \n",
       "1305    NaN                              NaN      NaN  \n",
       "1306  304.0                              NaN    adult  \n",
       "1307    NaN                              NaN    adult  \n",
       "1308    NaN                              NaN    adult  \n",
       "\n",
       "[1309 rows x 15 columns]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "선실등급, 연령대 등에 다라서 생존율에 영향을 미쳤는지 상관관계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1b36274a348>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,4))\n",
    "#죄석에 따라\n",
    "plt.subplot(131) #1-> 1행, 3-> 3열, 1 -> n번째 그림\n",
    "sns.barplot('pclass','survived',data=df,ci=0) #x축 y축\n",
    "#나이에 따라\n",
    "plt.subplot(132)\n",
    "sns.barplot('age_cat','survived',data=df,ci=0)\n",
    "#성별에 다라\n",
    "plt.subplot(133)\n",
    "sns.barplot('sex','survived',data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### seaborn\n",
    "**우리가 원하는 바에 해당하는 디자인을 사용하면 됨**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
